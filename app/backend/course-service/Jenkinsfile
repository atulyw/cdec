pipeline {
    agent {
        label 'ecs-agent'
    }
    
    environment {
        AWS_REGION = 'eu-west-1'
        EKS_CLUSTER_NAME = 'backend-dev-cluster'
        DOCKER_REGISTRY = '207837001318.dkr.ecr.eu-west-1.amazonaws.com'
        IMAGE_NAME = 'cloudblitz/course-service'
        KUBE_NAMESPACE = 'cloudblitz'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Setup Java') {
            steps {
                echo 'Setting up Java 17...'
                sh '''
                    # Check if Java 17 is already available
                    if command -v java >/dev/null 2>&1; then
                        JAVA_VERSION=$(java -version 2>&1 | head -n 1 | cut -d'"' -f2 | cut -d'.' -f1)
                        echo "Current Java version: $JAVA_VERSION"
                        
                        if [ "$JAVA_VERSION" -ge 17 ]; then
                            echo "Java 17+ already available"
                            export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))
                        else
                            echo "Downloading and installing OpenJDK 17 manually..."
                            # Download OpenJDK 17
                            wget -O openjdk-17.tar.gz https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-x64_bin.tar.gz
                            
                            # Extract to local directory
                            mkdir -p ~/java
                            tar -xzf openjdk-17.tar.gz -C ~/java
                            
                            # Set environment variables
                            export JAVA_HOME=~/java/jdk-17.0.2
                            export PATH=$JAVA_HOME/bin:$PATH
                            
                            # Clean up
                            rm openjdk-17.tar.gz
                        fi
                    else
                        echo "Downloading and installing OpenJDK 17 manually..."
                        # Download OpenJDK 17
                        wget -O openjdk-17.tar.gz https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-x64_bin.tar.gz
                        
                        # Extract to local directory
                        mkdir -p ~/java
                        tar -xzf openjdk-17.tar.gz -C ~/java
                        
                        # Set environment variables
                        export JAVA_HOME=~/java/jdk-17.0.2
                        export PATH=$JAVA_HOME/bin:$PATH
                        
                        # Clean up
                        rm openjdk-17.tar.gz
                    fi
                    
                    echo "JAVA_HOME: $JAVA_HOME"
                    java -version
                '''
            }
        }
        
        stage('Build and Test Application') {
            steps {
                echo 'Building and testing Spring Boot application...'
                sh '''
                    cd app/backend/course-service
                    ./mvnw clean verify
                '''
            }
        }
        
        stage('SonarCloud Analysis') {
            steps {
                echo 'Running SonarCloud analysis...'
                withCredentials([string(credentialsId: 'sonarcloud-token', variable: 'SONAR_TOKEN')]) {
                    sh '''
                        cd app/backend/course-service
                        ./mvnw org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
                            -Dsonar.projectKey=atulyw_cdec \
                            -Dsonar.organization=atulyw \
                            -Dsonar.host.url=https://sonarcloud.io \
                            -Dsonar.login=${SONAR_TOKEN}
                    '''
                }
            }
            post {
                always {
                    script {
                        echo 'Checking SonarCloud Quality Gate status...'
                        try {
                            withCredentials([string(credentialsId: 'sonarcloud-token', variable: 'SONAR_TOKEN')]) {
                                def qualityGateStatus = sh(
                                    script: '''
                                        cd app/backend/course-service
                                        curl -s -u ${SONAR_TOKEN}: \
                                            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=atulyw_cdec" \
                                            | grep -o '"status":"[^"]*"' | cut -d'"' -f4
                                    ''',
                                    returnStdout: true
                                ).trim()
                                
                                echo "Quality Gate Status: ${qualityGateStatus}"
                                
                                if (qualityGateStatus == 'ERROR') {
                                    echo "‚ùå SonarCloud Quality Gate FAILED!"
                                    echo "üö´ Pipeline will be terminated due to code quality issues."
                                    currentBuild.result = 'FAILURE'
                                    error "SonarCloud Quality Gate FAILED! Pipeline terminated due to code quality issues."
                                } else if (qualityGateStatus == 'OK') {
                                    echo "‚úÖ SonarCloud Quality Gate PASSED! Proceeding with deployment."
                                } else {
                                    echo "‚ö†Ô∏è Quality Gate Status: ${qualityGateStatus} - Proceeding with caution."
                                }
                            }
                        } catch (Exception e) {
                            echo "‚ùå Error checking SonarCloud Quality Gate: ${e.getMessage()}"
                            currentBuild.result = 'FAILURE'
                            error "Failed to check SonarCloud Quality Gate. Pipeline terminated."
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            agent {
                label 'master'
            }
            steps {
                echo 'Building Docker image on master host...'
                script {
                    def imageTag = "${env.BUILD_NUMBER}"
                    def fullImageName = "${DOCKER_REGISTRY}/${IMAGE_NAME}:${imageTag}"
                    
                    sh """
                        # Login to ECR
                        aws ecr get-login-password --region eu-west-1 | sudo docker login --username AWS --password-stdin ${DOCKER_REGISTRY}
                        
                        cd app/backend/course-service
                        sudo docker build -t ${fullImageName} .
                        sudo docker tag ${fullImageName} ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                    """
                    
                    env.DOCKER_IMAGE = fullImageName
                }
            }
        }
        
        stage('Push Docker Image') {
            agent {
                label 'master'
            }
            steps {
                echo 'Pushing Docker image to ECR registry...'
                sh """
                    # Login to ECR
                    aws ecr get-login-password --region eu-west-1 | sudo docker login --username AWS --password-stdin ${DOCKER_REGISTRY}
                    
                    # Push images to ECR
                    sudo docker push ${DOCKER_IMAGE}
                    sudo docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                    sudo docker rmi ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                """
            }
        }
        
        stage('Deploy to EKS') {
            steps {
                echo 'Deploying to EKS cluster...'
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh """
                            # Configure kubectl for EKS
                            aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER_NAME}
                            
                            # Create namespace if it doesn't exist
                            kubectl create namespace ${KUBE_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                            
                            # Update image tag in deployment
                            sed -i 's|image: cloudblitz/course-service:latest|image: ${DOCKER_IMAGE}|g' app/backend/course-service/k8s/deployment.yaml
                            
                            # Apply Kubernetes manifests
                            kubectl apply -f app/backend/course-service/k8s/
                            
                            # Wait for deployment to be ready
                            kubectl rollout status deployment/course-service -n ${KUBE_NAMESPACE} --timeout=300s
                        """
                    }
                }
            }
        }
        
        stage('Health Check') {
            steps {
                echo 'Performing health check...'
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh """
                            # Get service endpoint
                            kubectl get service course-service -n ${KUBE_NAMESPACE}
                            
                            # Wait for pods to be ready
                            kubectl wait --for=condition=ready pod -l app=course-service -n ${KUBE_NAMESPACE} --timeout=300s
                            
                            echo "Course service deployment completed successfully!"
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up workspace...'
            deleteDir()
        }
        success {
            echo 'Course service deployment successful!'
        }
        failure {
            echo 'Course service deployment failed!'
        }
    }
}
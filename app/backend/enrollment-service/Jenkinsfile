pipeline {
    agent any
    
    environment {
        AWS_REGION = 'us-east-1'
        EKS_CLUSTER_NAME = 'cloudblitz-cluster'
        DOCKER_REGISTRY = 'your-docker-registry.com'
        IMAGE_NAME = 'cloudblitz/enrollment-service'
        KUBE_NAMESPACE = 'cloudblitz'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Build Application') {
            steps {
                echo 'Building Spring Boot application...'
                sh '''
                    cd backend/enrollment-service
                    ./mvnw clean package -DskipTests
                '''
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'Running unit tests...'
                sh '''
                    cd backend/enrollment-service
                    ./mvnw test
                '''
            }
            post {
                always {
                    publishTestResults testResultsPattern: 'backend/enrollment-service/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                script {
                    def imageTag = "${env.BUILD_NUMBER}"
                    def fullImageName = "${DOCKER_REGISTRY}/${IMAGE_NAME}:${imageTag}"
                    
                    sh """
                        cd backend/enrollment-service
                        docker build -t ${fullImageName} .
                        docker tag ${fullImageName} ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                    """
                    
                    env.DOCKER_IMAGE = fullImageName
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                echo 'Pushing Docker image to registry...'
                sh """
                    docker push ${DOCKER_IMAGE}
                    docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                """
            }
        }
        
        stage('Deploy to EKS') {
            steps {
                echo 'Deploying to EKS cluster...'
                script {
                    sh """
                        # Configure kubectl for EKS
                        aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER_NAME}
                        
                        # Create namespace if it doesn't exist
                        kubectl create namespace ${KUBE_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                        
                        # Update image tag in deployment
                        sed -i 's|image: cloudblitz/enrollment-service:latest|image: ${DOCKER_IMAGE}|g' backend/enrollment-service/k8s/deployment.yaml
                        
                        # Apply Kubernetes manifests
                        kubectl apply -f backend/enrollment-service/k8s/
                        
                        # Wait for deployment to be ready
                        kubectl rollout status deployment/enrollment-service -n ${KUBE_NAMESPACE} --timeout=300s
                    """
                }
            }
        }
        
        stage('Health Check') {
            steps {
                echo 'Performing health check...'
                script {
                    sh """
                        # Get service endpoint
                        kubectl get service enrollment-service -n ${KUBE_NAMESPACE}
                        
                        # Wait for pods to be ready
                        kubectl wait --for=condition=ready pod -l app=enrollment-service -n ${KUBE_NAMESPACE} --timeout=300s
                        
                        echo "Enrollment service deployment completed successfully!"
                    """
                }
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'Enrollment service deployment successful!'
        }
        failure {
            echo 'Enrollment service deployment failed!'
        }
    }
}


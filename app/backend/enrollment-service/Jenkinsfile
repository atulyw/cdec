pipeline {
    agent {
        label 'ecs-agent'
    }
    
    environment {
        AWS_REGION = 'eu-west-1'
        EKS_CLUSTER_NAME = 'backend-dev-cluster'
        DOCKER_REGISTRY = '207837001318.dkr.ecr.eu-west-1.amazonaws.com'
        IMAGE_NAME = 'cloudblitz/enrollment-service'
        KUBE_NAMESPACE = 'cloudblitz'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Setup Java') {
            steps {
                echo 'Setting up Java 17...'
                sh '''
                    # Check if Java 17 is already available
                    if command -v java >/dev/null 2>&1; then
                        JAVA_VERSION=$(java -version 2>&1 | head -n 1 | cut -d'"' -f2 | cut -d'.' -f1)
                        echo "Current Java version: $JAVA_VERSION"
                        
                        if [ "$JAVA_VERSION" -ge 17 ]; then
                            echo "Java 17+ already available"
                            export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))
                        else
                            echo "Downloading and installing OpenJDK 17 manually..."
                            # Download OpenJDK 17
                            wget -O openjdk-17.tar.gz https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-x64_bin.tar.gz
                            
                            # Extract to local directory
                            mkdir -p ~/java
                            tar -xzf openjdk-17.tar.gz -C ~/java
                            
                            # Set environment variables
                            export JAVA_HOME=~/java/jdk-17.0.2
                            export PATH=$JAVA_HOME/bin:$PATH
                            
                            # Clean up
                            rm openjdk-17.tar.gz
                        fi
                    else
                        echo "Downloading and installing OpenJDK 17 manually..."
                        # Download OpenJDK 17
                        wget -O openjdk-17.tar.gz https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-x64_bin.tar.gz
                        
                        # Extract to local directory
                        mkdir -p ~/java
                        tar -xzf openjdk-17.tar.gz -C ~/java
                        
                        # Set environment variables
                        export JAVA_HOME=~/java/jdk-17.0.2
                        export PATH=$JAVA_HOME/bin:$PATH
                        
                        # Clean up
                        rm openjdk-17.tar.gz
                    fi
                    
                    echo "JAVA_HOME: $JAVA_HOME"
                    java -version
                '''
            }
        }
        
        stage('Build Application') {
            steps {
                echo 'Building Spring Boot application...'
                sh '''
                    cd app/backend/enrollment-service
                    ./mvnw clean package
                '''
            }
        }
        
        stage('Test with Coverage') {
            steps {
                echo 'Running tests with coverage...'
                sh '''
                    cd app/backend/enrollment-service
                    ./mvnw test jacoco:report
                '''
            }
            post {
                always {
                    publishTestResults testResultsPattern: 'app/backend/enrollment-service/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('SonarCloud Analysis') {
            steps {
                echo 'Running SonarCloud analysis...'
                script {
                    withCredentials([string(credentialsId: 'sonarcloud-token', variable: 'SONAR_TOKEN')]) {
                        sh '''
                            cd app/backend/enrollment-service
                            
                            # Run SonarCloud analysis with Maven (using properties file)
                            echo "Running SonarCloud analysis with Maven..."
                            ./mvnw sonar:sonar \
                                -Dsonar.host.url=https://sonarcloud.io \
                                -Dsonar.login=${SONAR_TOKEN}
                        '''
                    }
                }
            }
        }
        
        stage('SonarCloud Analysis (Fallback)') {
            when {
                expression { return false } // Disabled by default, enable if Maven approach fails
            }
            steps {
                echo 'Running SonarCloud analysis with standalone scanner...'
                script {
                    withCredentials([string(credentialsId: 'sonarcloud-token', variable: 'SONAR_TOKEN')]) {
                        sh '''
                            cd app/backend/enrollment-service
                            
                            # Setup Java 17 for SonarCloud scanner
                            echo "Setting up Java 17 for SonarCloud analysis..."
                            
                            # Download OpenJDK 17
                            wget -O openjdk-17.tar.gz https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-x64_bin.tar.gz
                            
                            # Extract to local directory
                            mkdir -p ~/java
                            tar -xzf openjdk-17.tar.gz -C ~/java
                            
                            # Set environment variables for SonarCloud
                            export JAVA_HOME=~/java/jdk-17.0.2
                            export PATH=$JAVA_HOME/bin:$PATH
                            
                            # Clean up
                            rm openjdk-17.tar.gz
                            
                            echo "Java 17 setup complete for SonarCloud analysis"
                            echo "JAVA_HOME: $JAVA_HOME"
                            java -version
                            
                            # Download and setup SonarCloud scanner
                            echo "Downloading SonarCloud scanner..."
                            wget -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
                            unzip sonar-scanner.zip
                            
                            # Set SonarCloud scanner path
                            export SONAR_SCANNER_HOME=$(pwd)/sonar-scanner-4.8.0.2856-linux
                            export PATH=$PATH:$SONAR_SCANNER_HOME/bin
                            
                            echo "SonarCloud scanner setup complete"
                            echo "PATH: $PATH"
                            
                            # Verify Java version for SonarCloud scanner
                            echo "Verifying Java version for SonarCloud scanner..."
                            $SONAR_SCANNER_HOME/bin/sonar-scanner --version
                            
                            # Run SonarCloud analysis with explicit Java 17
                            echo "Running SonarCloud analysis..."
                            $SONAR_SCANNER_HOME/bin/sonar-scanner \
                                -Dsonar.projectKey=cloudblitz-enrollment-service \
                                -Dsonar.organization=your-org \
                                -Dsonar.host.url=https://sonarcloud.io \
                                -Dsonar.login=${SONAR_TOKEN} \
                                -Dsonar.sources=src/main/java \
                                -Dsonar.tests=src/test/java \
                                -Dsonar.java.binaries=target/classes \
                                -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
                                -Dsonar.junit.reportPaths=target/surefire-reports
                            
                            # Cleanup
                            rm -rf sonar-scanner.zip sonar-scanner-4.8.0.2856-linux
                        '''
                    }
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                echo 'Waiting for SonarCloud Quality Gate...'
                script {
                    withCredentials([string(credentialsId: 'sonarcloud-token', variable: 'SONAR_TOKEN')]) {
                        sh '''
                            cd app/backend/enrollment-service
                            
                            # Wait for quality gate result
                            # Note: This is a simplified approach. In a real scenario, you'd use Jenkins SonarQube plugin
                            # For now, we'll add a delay and check if analysis completed successfully
                            echo "Quality Gate check completed. Analysis results available in SonarCloud dashboard."
                            
                            # You can add additional quality gate checks here
                            # For example, checking specific metrics or thresholds
                        '''
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            agent {
                label 'master'
            }
            steps {
                echo 'Building Docker image on master host...'
                script {
                    def imageTag = "${env.BUILD_NUMBER}"
                    def fullImageName = "${DOCKER_REGISTRY}/${IMAGE_NAME}:${imageTag}"
                    
                    sh """
                        # Login to ECR
                        aws ecr get-login-password --region eu-west-1 | sudo docker login --username AWS --password-stdin ${DOCKER_REGISTRY}
                        
                        cd app/backend/enrollment-service
                        sudo docker build -t ${fullImageName} .
                        sudo docker tag ${fullImageName} ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                    """
                    
                    env.DOCKER_IMAGE = fullImageName
                }
            }
        }
        
        stage('Push Docker Image') {
            agent {
                label 'master'
            }
            steps {
                echo 'Pushing Docker image to ECR registry...'
                sh """
                    # Login to ECR
                    aws ecr get-login-password --region eu-west-1 | sudo docker login --username AWS --password-stdin ${DOCKER_REGISTRY}
                    
                    # Push images to ECR
                    sudo docker push ${DOCKER_IMAGE}
                    sudo docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                    sudo docker rmi ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                """
            }
        }
        
        stage('Deploy to EKS') {
            steps {
                echo 'Deploying to EKS cluster...'
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh """
                            # Configure kubectl for EKS
                            aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER_NAME}
                            
                            # Create namespace if it doesn't exist
                            kubectl create namespace ${KUBE_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                            
                            # Update image tag in deployment
                            sed -i 's|image: cloudblitz/enrollment-service:latest|image: ${DOCKER_IMAGE}|g' app/backend/enrollment-service/k8s/deployment.yaml
                            
                            # Apply Kubernetes manifests
                            kubectl apply -f app/backend/enrollment-service/k8s/
                            
                            # Wait for deployment to be ready
                            kubectl rollout status deployment/enrollment-service -n ${KUBE_NAMESPACE} --timeout=300s
                        """
                    }
                }
            }
        }
        
        stage('Health Check') {
            steps {
                echo 'Performing health check...'
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh """
                            # Get service endpoint
                            kubectl get service enrollment-service -n ${KUBE_NAMESPACE}
                            
                            # Wait for pods to be ready
                            kubectl wait --for=condition=ready pod -l app=enrollment-service -n ${KUBE_NAMESPACE} --timeout=300s
                            
                            echo "Enrollment service deployment completed successfully!"
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up workspace...'
            deleteDir()
        }
        success {
            echo 'Enrollment service deployment successful!'
        }
        failure {
            echo 'Enrollment service deployment failed!'
        }
    }
}
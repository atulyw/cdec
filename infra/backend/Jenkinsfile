// Simple Jenkins Pipeline for Backend Infrastructure
// This pipeline creates AWS backend infrastructure using Terraform
// Perfect for developers with 1 year of experience

pipeline {
    // Run on Jenkins agent with label 'ecs-agent'
    agent {
        label 'ecs-agent'
    }
    
    // Parameters that user can choose when running the pipeline
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'stage', 'prod'],
            description: 'Which environment to deploy to (dev, stage, or prod)'
        )
        choice(
            name: 'ACTION',
            choices: ['create', 'delete'],
            description: 'Choose action: create infrastructure or delete infrastructure'
        )
        booleanParam(
            name: 'AUTO_APPROVE',
            defaultValue: false,
            description: 'Skip manual approval and apply changes automatically (DANGEROUS!)'
        )
    }
    
    // Environment variables available throughout the pipeline
    environment {
        TF_VAR_environment = "${params.ENVIRONMENT}"
        AWS_DEFAULT_REGION = 'eu-west-1'
        TF_STATE_BUCKET = 'terraform-state-bucket-cdec41'
        TF_STATE_KEY = 'backend/${params.ENVIRONMENT}/terraform-v2.tfstate'
        TF_STATE_REGION = 'eu-west-1'
    }
    
    // Main pipeline stages
    stages {
        
        // Step 1: Get the code from Git repository
        stage('Get Code') {
            steps {
                checkout scm
                script {
                    // Set the path where our Terraform files are located
                    env.WORKSPACE_PATH = "${WORKSPACE}/infra/backend/env/${params.ENVIRONMENT}"
                }
            }
        }
        
        // Step 2: Setup Terraform and connect to AWS
        stage('Setup Terraform') {
            steps {
                script {
                    // Use AWS credentials stored in Jenkins
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh """
                            # Go to our Terraform directory
                            cd ${env.WORKSPACE_PATH}
                            
                            # Create backend configuration file
                            # This tells Terraform where to store its state file
                            cat > backend.tf << 'EOF'
terraform {
  backend "s3" {
    bucket         = "terraform-state-bucket-cdec41"
    key            = "backend/dev/terraform-v2.tfstate"
    region         = "eu-west-1"
    encrypt        = true
    dynamodb_table = "terraform-state-lock"
    use_lockfile   = true
  }
}
EOF
                            
                            # Clean up any old state files that might cause problems
                            rm -f terraform.tfstate* .terraform.lock.hcl
                            
                            # Initialize Terraform (downloads providers and sets up backend)
                            terraform init -upgrade
                        """
                    }
                }
            }
        }
        
        // Step 3: Plan what infrastructure will be created or destroyed
        stage('Plan Infrastructure') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        if (params.ACTION == 'delete') {
                            sh """
                                cd ${env.WORKSPACE_PATH}
                                # Create a destroy plan file showing what will be deleted
                                terraform plan -destroy -out=tfplan-${params.ENVIRONMENT}.out
                            """
                        } else {
                            sh """
                                cd ${env.WORKSPACE_PATH}
                                # Create a plan file showing what will be created/changed
                                terraform plan -out=tfplan-${params.ENVIRONMENT}.out
                            """
                        }
                    }
                }
            }
            post {
                always {
                    // Save the plan file as an artifact so we can download it
                    archiveArtifacts artifacts: "infra/backend/env/dev/tfplan-${params.ENVIRONMENT}.out", fingerprint: true
                }
            }
        }
        
        // Step 4: Create or Delete the infrastructure
        stage('Apply Infrastructure Changes') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        if (params.ACTION == 'delete') {
                            if (params.AUTO_APPROVE) {
                                // If auto-approve is enabled, destroy without asking
                                sh """
                                    cd ${env.WORKSPACE_PATH}
                                    terraform apply -auto-approve tfplan-${params.ENVIRONMENT}.out
                                """
                            } else {
                                // Ask for manual approval before destroying infrastructure
                                input message: "⚠️ DANGER: Ready to DELETE backend infrastructure for ${params.ENVIRONMENT}? This action cannot be undone!", ok: 'Yes, Delete'
                                sh """
                                    cd ${env.WORKSPACE_PATH}
                                    terraform apply tfplan-${params.ENVIRONMENT}.out
                                """
                            }
                        } else {
                            if (params.AUTO_APPROVE) {
                                // If auto-approve is enabled, apply changes without asking
                                sh """
                                    cd ${env.WORKSPACE_PATH}
                                    terraform apply -auto-approve tfplan-${params.ENVIRONMENT}.out
                                """
                            } else {
                                // Ask for manual approval before creating infrastructure
                                input message: "Ready to create backend infrastructure for ${params.ENVIRONMENT}?", ok: 'Yes, Create'
                                sh """
                                    cd ${env.WORKSPACE_PATH}
                                    terraform apply tfplan-${params.ENVIRONMENT}.out
                                """
                            }
                        }
                    }
                }
            }
        }
        
        // Step 5: Show results
        stage('Show Results') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        if (params.ACTION == 'delete') {
                            sh """
                                cd ${env.WORKSPACE_PATH}
                                echo "=== Backend Infrastructure Deleted Successfully ==="
                                echo "All backend resources for ${params.ENVIRONMENT} environment have been destroyed."
                            """
                        } else {
                            sh """
                                cd ${env.WORKSPACE_PATH}
                                echo "=== Backend Infrastructure Created Successfully ==="
                                # Show all the outputs from Terraform (like cluster names, URLs, etc.)
                                terraform output
                                # Also save outputs to a JSON file
                                terraform output -json > terraform-outputs.json
                            """
                        }
                    }
                }
                // Save the outputs file as an artifact (only for create action)
                script {
                    if (params.ACTION == 'create') {
                        archiveArtifacts artifacts: "infra/backend/env/dev/terraform-outputs.json", fingerprint: true
                    }
                }
            }
        }
        
        // Step 6: Verify the EKS cluster is working (only for create action)
        stage('Verify EKS Cluster') {
            when {
                expression { params.ACTION == 'create' }
            }
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh """
                            # Get the EKS cluster name from Terraform outputs
                            CLUSTER_NAME=\$(cd ${env.WORKSPACE_PATH} && terraform output -raw cluster_name)
                            
                            echo "Verifying EKS cluster: \$CLUSTER_NAME"
                            
                            # Check if the cluster exists and is accessible
                            aws eks describe-cluster --name \$CLUSTER_NAME --region ${env.AWS_DEFAULT_REGION} || {
                                echo "❌ EKS cluster verification failed"
                                exit 1
                            }
                            
                            echo "✅ EKS cluster verification passed - cluster is ready!"
                        """
                    }
                }
            }
        }
        
    }
    
    // What to do after the pipeline finishes
    post {
        always {
            // Clean up temporary files
            script {
                sh """
                    cd ${env.WORKSPACE_PATH}
                    rm -f tfplan-${params.ENVIRONMENT}.out
                """
            }
        }
        success {
            script {
                if (params.ACTION == 'delete') {
                    echo "✅ Backend infrastructure deleted successfully for ${params.ENVIRONMENT}!"
                } else {
                    echo "✅ Backend infrastructure created successfully for ${params.ENVIRONMENT}!"
                }
            }
        }
        failure {
            script {
                if (params.ACTION == 'delete') {
                    echo "❌ Backend infrastructure deletion failed for ${params.ENVIRONMENT}"
                } else {
                    echo "❌ Backend infrastructure creation failed for ${params.ENVIRONMENT}"
                }
            }
            echo "Check the build logs for more details: ${env.BUILD_URL}"
        }
        unstable {
            script {
                if (params.ACTION == 'delete') {
                    echo "⚠️ Backend infrastructure deletion completed with warnings for ${params.ENVIRONMENT}"
                } else {
                    echo "⚠️ Backend infrastructure creation completed with warnings for ${params.ENVIRONMENT}"
                }
            }
        }
    }
}
// Simple Jenkins Pipeline for Frontend Infrastructure
// This pipeline creates AWS infrastructure using Terraform
// Perfect for developers with 1 year of experience

pipeline {
    // Run on Jenkins agent with label 'ecs-agent'
    agent {
        label 'ecs-agent'
    }
    
    // Parameters that user can choose when running the pipeline
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'stage', 'prod'],
            description: 'Which environment to deploy to (dev, stage, or prod)'
        )
        booleanParam(
            name: 'AUTO_APPROVE',
            defaultValue: false,
            description: 'Skip manual approval and apply changes automatically (DANGEROUS!)'
        )
    }
    
    // Environment variables available throughout the pipeline
    environment {
        TF_VAR_environment = "${params.ENVIRONMENT}"
        AWS_DEFAULT_REGION = 'eu-west-1'
        TF_STATE_BUCKET = 'terraform-state-bucket-cdec'
        TF_STATE_KEY = 'frontend/${params.ENVIRONMENT}/terraform-v2.tfstate'
        TF_STATE_REGION = 'eu-west-1'
    }
    
    // Main pipeline stages
    stages {
        
        // Step 1: Get the code from Git repository
        stage('Get Code') {
            steps {
                checkout scm
                script {
                    // Set the path where our Terraform files are located
                    env.WORKSPACE_PATH = "${WORKSPACE}/infra/frontend/env/${params.ENVIRONMENT}"
                    sh 'printenv'
                }
            }
        }
        
        // Step 2: Setup Terraform and connect to AWS
        stage('Setup Terraform') {
            steps {
                script {
                    // Use AWS credentials stored in Jenkins
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh """
                            # Go to our Terraform directory
                            cd ${env.WORKSPACE_PATH}
                            
                            # Create backend configuration file
                            # This tells Terraform where to store its state file
                            cat > backend.tf << 'EOF'
terraform {
  backend "s3" {
    bucket         = "terraform-state-bucket-cdec"
    key            = "frontend/dev/terraform-v2.tfstate"
    region         = "eu-west-1"
    encrypt        = true
    dynamodb_table = "terraform-state-lock"
    use_lockfile   = true
  }
}
EOF
                            
                            # Clean up any old state files that might cause problems
                            rm -f terraform.tfstate* .terraform.lock.hcl
                            
                            # Initialize Terraform (downloads providers and sets up backend)
                            terraform init -upgrade
                        """
                    }
                }
            }
        }
        
        // Step 3: Plan what infrastructure will be created
        stage('Plan Infrastructure') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh """
                            cd ${env.WORKSPACE_PATH}
                            # Create a plan file showing what will be created/changed
                            terraform plan -out=tfplan-${params.ENVIRONMENT}.out
                        """
                    }
                }
            }
            post {
                always {
                    // Save the plan file as an artifact so we can download it
                    archiveArtifacts artifacts: "infra/frontend/env/dev/tfplan-${params.ENVIRONMENT}.out", fingerprint: true
                }
            }
        }
        
        // Step 4: Create the infrastructure
        stage('Create Infrastructure') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        if (params.AUTO_APPROVE) {
                            // If auto-approve is enabled, apply changes without asking
                            sh """
                                cd ${env.WORKSPACE_PATH}
                                terraform apply -auto-approve tfplan-${params.ENVIRONMENT}.out
                            """
                        } else {
                            // Ask for manual approval before creating infrastructure
                            input message: "Ready to create infrastructure for ${params.ENVIRONMENT}?", ok: 'Yes, Create'
                            sh """
                                cd ${env.WORKSPACE_PATH}
                                terraform apply tfplan-${params.ENVIRONMENT}.out
                            """
                        }
                    }
                }
            }
        }
        
        // Step 5: Show what was created
        stage('Show Results') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh """
                            cd ${env.WORKSPACE_PATH}
                            echo "=== Infrastructure Created Successfully ==="
                            # Show all the outputs from Terraform (like URLs, IDs, etc.)
                            terraform output
                            # Also save outputs to a JSON file
                            terraform output -json > terraform-outputs.json
                        """
                    }
                }
                // Save the outputs file as an artifact
                archiveArtifacts artifacts: "infra/frontend/env/dev/terraform-outputs.json", fingerprint: true
            }
        }
        
    }
    
    // What to do after the pipeline finishes
    post {
        always {
            // Clean up temporary files
            script {
                sh """
                    cd ${env.WORKSPACE_PATH}
                    rm -f tfplan-${params.ENVIRONMENT}.out
                """
            }
        }
        success {
            echo "✅ Infrastructure created successfully for ${params.ENVIRONMENT}!"
        }
        failure {
            echo "❌ Infrastructure creation failed for ${params.ENVIRONMENT}"
            echo "Check the build logs for more details: ${env.BUILD_URL}"
        }
        unstable {
            echo "⚠️ Infrastructure creation completed with warnings for ${params.ENVIRONMENT}"
        }
    }
}